package html
// Do Not Edit
// Generated by Blip
// source blip: examples/template/blipWebServer/html/listUsers.blip.html

import (
	"blip/blipUtil"
	"blip/examples/template/blipWebServer/model"
	"context"
	"fmt"
	"io"
	"time"
)

// Function block from line: 16

// A go function, will be in file but outside the process method
// Able to do this but may be better in another supporting file.
// For demo only.
func activeDesc(active bool) string {
    if active {
        return "Active"
    } else {
        return "InActive"
    }
}


func ListUsersRender( users []*model.User, c context.Context, w io.Writer ) (terror error) {
    start := time.Now()

	var si = blipUtil.Instance()
	var escaper = si.GetEscaperFor( "html") 
	defer func() {
		if err := recover(); err != nil {
			fmt.Printf("Catch panic %s: %s\n", "ListUsersRender", err)
			terror = fmt.Errorf("%v", err)
		}
	    si.RenderComplete(escaper, "listUsers", "html", time.Since(start), terror)
	}()
	// Line: 2
	si.Write(w, []byte("\n"))
	// Line: 5
	si.Write(w, []byte("\n"))
	// Line: 18
	si.Write(w, []byte("\n\n"))
	// Line: 19
	var ctxL1 = context.WithValue(c, "__Blip__", 1)
		// Line: 21
		var contentF1S1 = func() (terror error) {
			// Line: 26
			si.Write(w, []byte("<style>\n    .usertable {\n        margin: 16px;\n    }\n</style>\n"))
			// End of content block
			return
		}
		ctxL1 = context.WithValue(ctxL1, "styles", contentF1S1)		// Line: 29
		var contentF1S2 = func() (terror error) {
			// Line: 42
			si.Write(w, []byte("<div class=\"jumbotron\">\n<table class=\"table usertable\">\n    <thead>\n    <tr>\n        <th>#</th>\n        <th>Name</th>\n        <th>Title</th>\n        <th>EMail</th>\n        <th>Status</th>\n        <th>Action</th>\n    </tr>\n    </thead>\n    <tbody>\n"))
			// Line: 43
			for idx, user := range users { _ = idx
				// Line: 44
				si.Write(w, []byte("<tr>\n    <td>"))
				// Line: 44
				si.WriteInt(w, idx)
				// Line: 45
				si.Write(w, []byte("</td>\n    <td>"))
				// Line: 45
				si.WriteStrSafe(w, user.Name, escaper)
				// Line: 46
				si.Write(w, []byte("</td>\n    <td>"))
				// Line: 46
				si.WriteStrSafe(w, user.Title, escaper)
				// Line: 47
				si.Write(w, []byte("</td>\n    <td>"))
				// Line: 47
				si.WriteStrSafe(w, user.EMail, escaper)
				// Line: 48
				si.Write(w, []byte("</td>\n    <td>"))
				// Line: 48
				si.WriteStrSafe(w, activeDesc(user.Active), escaper)
				// Line: 49
				si.Write(w, []byte("</td>\n    <td><a href=\"/users/view/"))
				// Line: 49
				si.WriteInt(w, idx)
				// Line: 51
				si.Write(w, []byte("\">View</a></td>\n</tr>\n"))
				// Line: 43
			} // end of @for@43
			// Line: 55
			si.Write(w, []byte("\n    </tbody>\n</table>\n</div>\n"))
			// End of content block
			return
		}
		ctxL1 = context.WithValue(ctxL1, "mainContent", contentF1S2)
	terror = RootRender("All Users", ctxL1, w)
	if terror != nil { return }
	// Line: 57
	si.Write(w, []byte("\n"))
	return
}