package html
// Do Not Edit
// Generated by Blip
// source blip: examples/template/blipWebServer/html/listActiveUsers.blip.html

import (
	"blip/blipUtil"
	"blip/examples/template/blipWebServer/model"
	"context"
	"fmt"
	"io"
	"time"
)



func ListActiveUsersRender( users []*model.User, c context.Context, w io.Writer ) (terror error) {
    start := time.Now()

	var si = blipUtil.Instance()
	var escaper = si.GetEscaperFor( "html") 
	defer func() {
		if err := recover(); err != nil {
			fmt.Printf("Catch panic %s: %s\n", "ListActiveUsersRender", err)
			terror = fmt.Errorf("%v", err)
		}
	    si.RenderComplete(escaper, "listActiveUsers", "html", time.Since(start), terror)
	}()
	// Line: 2
	si.Write(w, []byte("\n"))
	// Line: 5
	si.Write(w, []byte("\n"))
	// Line: 6
	var ctxL1 = context.WithValue(c, "__Blip__", 1)
		// Line: 8
		var contentF1S1 = func() (terror error) {
			// Line: 13
			si.Write(w, []byte("<style>\n    .usertable {\n        margin: 16px;\n    }\n</style>\n"))
			// End of content block
			return
		}
		ctxL1 = context.WithValue(ctxL1, "styles", contentF1S1)		// Line: 16
		var contentF1S2 = func() (terror error) {
			// Line: 29
			si.Write(w, []byte("<div class=\"jumbotron\">\n<table class=\"table usertable\">\n    <thead>\n    <tr>\n        <th>#</th>\n        <th>Name</th>\n        <th>Title</th>\n        <th>EMail</th>\n        <th>Status</th>\n        <th>Action</th>\n    </tr>\n    </thead>\n    <tbody>\n"))
			// Line: 30
			for idx, user := range users { _ = idx
				// Line: 31
				if user.Active {
					// Line: 32
					si.Write(w, []byte("<tr>\n    <td>"))
					// Line: 32
					si.WriteInt(w, idx)
					// Line: 33
					si.Write(w, []byte("</td>\n    <td>"))
					// Line: 33
					si.WriteStrSafe(w, user.Name, escaper)
					// Line: 34
					si.Write(w, []byte("</td>\n    <td>"))
					// Line: 34
					si.WriteStrSafe(w, user.Title, escaper)
					// Line: 35
					si.Write(w, []byte("</td>\n    <td>"))
					// Line: 35
					si.WriteStrSafe(w, user.EMail, escaper)
					// Line: 36
					si.Write(w, []byte("</td>\n    <td>"))
					// Line: 36
					si.WriteStrSafe(w, activeDesc(user.Active), escaper)
					// Line: 37
					si.Write(w, []byte("</td>\n    <td><a href=\"/users/view/"))
					// Line: 37
					si.WriteInt(w, idx)
					// Line: 39
					si.Write(w, []byte("\">View</a></td>\n</tr>\n"))
					// Line: 40
				}
				// Line: 40
				si.Write(w, []byte("\n"))
				// Line: 30
			} // end of @for@30
			// Line: 45
			si.Write(w, []byte("\n    </tbody>\n</table>\n</div>\n\n"))
			// End of content block
			return
		}
		ctxL1 = context.WithValue(ctxL1, "mainContent", contentF1S2)
	terror = RootRender("Active Users", ctxL1, w)
	if terror != nil { return }
	// Line: 47
	si.Write(w, []byte("\n"))
	return
}